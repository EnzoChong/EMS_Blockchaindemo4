/*eslint no-console: 0*/
"use strict";

var child_process = require('child_process');


function deployCB(req, res) {
    var deployerEnv = JSON.parse(JSON.stringify(process.env));

    // first, overwrite several deployer environment variables if replacements are given in the request body

    if (typeof req.body.HDI_DEPLOY_OPTIONS !== 'undefined')
    {
        deployerEnv.HDI_DEPLOY_OPTIONS = JSON.stringify(req.body.HDI_DEPLOY_OPTIONS);
    }

    if (typeof req.body.DEPLOY_ID === 'string')
    {
        deployerEnv.DEPLOY_ID = req.body.DEPLOY_ID;
    }

    if (typeof req.body.TARGET_CONTAINER === 'string')
    {
        deployerEnv.TARGET_CONTAINER = req.body.TARGET_CONTAINER;
    }

    if (typeof req.body.SERVICE_REPLACEMENTS !== 'undefined')
    {
        deployerEnv.SERVICE_REPLACEMENTS = JSON.stringify(req.body.SERVICE_REPLACEMENTS);
    }

    if (typeof req.body.VCAP_SERVICES !== 'undefined')
    {
        deployerEnv.VCAP_SERVICES = JSON.stringify(req.body.VCAP_SERVICES);
    }

    // second, merge additional service bindings into the VCAP_SERVICES
    // if given in the request body via the ADDITIONAL_VCAP_SERVICES property

    if (typeof req.body.ADDITIONAL_VCAP_SERVICES !== 'undefined')
    {
        if (typeof deployerEnv.VCAP_SERVICES === 'undefined')
        {
            // if ADDITIONAL_VCAP_SERVICES are given in the request and
            // there are no VCAP_SERVICES defined in the environment and
            // no replacements for VCAP_SERVICES are given in the request,
            // then we can simply set VCAP_SERVICES to the given ADDITIONAL_VCAP_SERVICES
            deployerEnv.VCAP_SERVICES = JSON.stringify(req.body.ADDITIONAL_VCAP_SERVICES);
        }
        else
        {
            // if ADDITIONAL_VCAP_SERVICES are given and there are already VCAP_SERVICES
            // defined in the environment or replacements for VCAP_SERVICES given
            // in the request, then we have to merge the given ADDITIONAL_VCAP_SERVICES
            // into the VCAP_SERVICES of the environment

            // read the current services from the environment
            var vcapServices = JSON.parse(deployerEnv.VCAP_SERVICES);

            // loop over all service names in the additional services
            for (var service in req.body.ADDITIONAL_VCAP_SERVICES)
            {
                // linter wants a check with hasOwnProperty
                if (req.body.ADDITIONAL_VCAP_SERVICES.hasOwnProperty(service))
                {
                    if (!vcapServices.hasOwnProperty(service))
                    {
                        // if there are no service bindings given in the
                        // VCAP_SERVICES for the name (e.g. "hana") of the
                        // additional service, then we can simply add the whole
                        // list of additional service bindings
                        vcapServices[service] = req.body.ADDITIONAL_VCAP_SERVICES[service];
                    }
                    else
                    {
                        // if there are already service bindings given in the
                        // VCAP_SERVICES for the name (e.g. "hana") of the
                        // additional service, then we have to merge the two
                        // lists of service bindings based on the binding name

                        // first, remember all existing binding names
                        var existingBindings = [];
                        for (var i=0; i < vcapServices[service].length; i++)
                        {
                            existingBindings.push(vcapServices[service][i].name);
                        }

                        // loop over all bindings of the additional service
                        for (var j=0; j < req.body.ADDITIONAL_VCAP_SERVICES[service].length; j++)
                        {
                            var binding = req.body.ADDITIONAL_VCAP_SERVICES[service][j];
                            var vcapIndex = existingBindings.indexOf(binding.name);
                            if (vcapIndex === -1)
                            {
                                // if there is no existing binding with the name
                                // of the additional binding, then we simply add
                                // the binding to the list in VCAP_SERVICES
                                vcapServices[service].push(binding);
                            }
                            else
                            {
                                // if there is an existing binding with the same
                                // name as the additional binding, then we overwrite
                                // the existing binding with the additional binding
                                vcapServices[service][vcapIndex] = binding;
                            }
                        }
                    }
                }
            }
            deployerEnv.VCAP_SERVICES = JSON.stringify(vcapServices);
        }
    }

    var response = { messages: [] };
    //console.log('forking hdi-deploy...');
    var pathToDeployer = require.resolve('@sap/hdi-deploy');
    var deployer = child_process.fork(pathToDeployer, ['--exit', '--send-messages-to-parent-process'],
        {
//            silent: true,
            env: deployerEnv
        }
    );

    deployer.on('message', function(message) {
        if (message.hasOwnProperty('final_message_sent'))
        {
            deployer.send({final_message_received:{}});
        } else {
            response.messages.push(message);
        }
    });
/*
    response.stdout = '';
    deployer.stdout.on('data', function(data) {
        response.stdout += data;
    });
    response.stderr = '';
    deployer.stderr.on('data', function(data) {
        response.stderr += data;
    });
*/
    deployer.on('close', function(code) {
        //console.log('hdi-deploy finished.');
        response.exitCode = code;
        res.end(JSON.stringify(response, null, 2));
    });
}


var express = require('express');
var app = express();

var basicAuth = require('express-basic-auth');
var users = {};
users[process.env.hdi_dynamic_deploy_user] = process.env.hdi_dynamic_deploy_password;
app.use(basicAuth({ users: users }));

var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var v1api = express.Router();
v1api.route('/deploy').post(deployCB);
app.use('/v1', v1api);

app.get('/', function (req, res) {
    res.end('This is the HDI deployment server. To trigger deployment send a suitable POST request to /v1/deploy');
});

var port = process.env.PORT;
var listener = app.listen(port, function(){
    console.log('hdi deployment server up and running, listening on port ' + listener.address().port);
});
