'use strict';

/* jslint indent: 4 */

var async = require('async');
var hdb = require('./hdbAsync.js');

function Version() {
    this.version = '';
    this.major = -1;
    this.minor = -1;
    this.revision = -1;
    this.patch = -1;
    this.versionSynthesized = '';
    this.error = undefined;

    this.calculateSynthesizedVersion = function() {
        this.versionSynthesized = '' + this.major + '.' + this.minor + '.' + this.revision + '.' + this.patch;
    };

    this.setVersion = function(str) {
        var components = str.split('.');

        if (components.length === 5) {
            this.version = str;
            this.major = parseInt(components[0]);
            this.minor = parseInt(components[1]);
            this.revision = parseInt(components[2]);
            this.patch = parseInt(components[3]);
        } else {
            this.version = 'unknown';
            this.major = 0;
            this.minor = 0;
            this.revision = 0;
            this.patch = 0;
        }
        this.error = undefined;
        this.calculateSynthesizedVersion();
    };

    this.isGreaterThanOrEqualTo = function(major, minor, revision, patch) {
        if (this.major < major) {
            return false;
        }
        if (this.major > major) {
            return true;
        }

        if (this.minor < minor) {
            return false;
        }
        if (this.minor > minor) {
            return true;
        }

        if (this.revision < revision) {
            return false;
        }
        if (this.revision > revision) {
            return true;
        }

        if (this.patch < patch) {
            return false;
        }

        return true;
    };

    this.setVersion('');
}

function getFallbackVersion() {
    return new Version();
}

function getVersion(credentials, cb) {
    var client = hdb(credentials.host, credentials.port, credentials.hdi_user, credentials.hdi_password, credentials.certificate, credentials.db_hosts);

    var tasks = [
        client.connect(),
        client.execute('SELECT VERSION FROM SYS.M_DATABASE')
    ];

    async.series(tasks, function(err, result) {
        client.end();
        var version = getFallbackVersion();

        if (!err) {
            version.setVersion(result[1][0].VERSION);
        } else {
            version.error = err.message;
        }

        cb(null, version);
    });
}

module.exports = {
    getFallbackVersion: getFallbackVersion,
    getVersion: getVersion
};
