'use strict';

/* jslint indent: 4 */

var async = require('async');

var content = require('./content.js');
var hdi = require('./hdi.js');
var logger = require('./logger.js');
var privileges = require('./privileges.js');
var filters = require('./filters.js');

module.exports = function(options, services, cb) {
    var contentPathsFilter = filters.invalidPathFilter();
    if (options.includeFilter.valid) {
        // an include-filter is given, merge the include-filter and the deploy options to ensure that we upload all files which are included in the deploy option;
        // if no include-filter is given, we don't need to care about the deploy option during the file walk
        contentPathsFilter.addPaths(options.includeFilter);
        contentPathsFilter.addPaths(options.deploy);
    }

    var
        cnt = content(options.root, services, options.workingSet, options.deployDirs, contentPathsFilter, options.stripCRFromCSV),
        tasks = [],
        targetCreds,
        container,
        containerRole;

    logger.trace('VCAP_SERVICES:', process.env.VCAP_SERVICES);

    logger.trace('top directories: ', cnt.serverTopDirs());

    logger.trace('deploy files: ', cnt.deployFiles());

    targetCreds = services.getTargetCreds();
    logger.trace('target credentials:', targetCreds);

    container = targetCreds.schema + '#OO';
    containerRole = targetCreds.schema + '::access_role';

    // if we have a default_access_role file in the processing set, check its content
    if (cnt.containsDefaultAccessRoleFile()) {
        var checkDefaultAccessRoleFileResult = cnt.checkDefaultAccessRoleFile();
        if (checkDefaultAccessRoleFileResult !== undefined) {
            cb(checkDefaultAccessRoleFileResult);
        }
    }

    tasks.push(function(cb) {
        privileges.grant(options, services, cnt, container, containerRole, cb);
    });

    tasks.push(function(cb) {
        hdi.deploy(options, targetCreds, cnt, cb);
    });

    async.series(tasks, cb);
};
